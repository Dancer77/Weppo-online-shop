<div class="action_name">Wyszukaj produkt: <input id="productToSearch" type="text" />
    <button id='btSearch'>Szukaj</button>
    <button id='btClear'>Wyczyść</button>
</div>
<hr class="smaller_hr">


<style> td, th { border: 1px solid rgb(0, 0, 0); } </style>
<table class="styled_table" id="list_of_products"> </table>

<hr class="smaller_hr">

<%if (role == "admin") {%>
    <p class="action_name">Dodawanie nowego produktu</p>
    <table class="styled_table">
        <thead>
            <tr>
                <th>Nowy produkt:</th>
                <th>Cena</th>
                <th>Opis</th>
                <th>Ilość</th>
            </tr>
        </thead>
        
        <tbody>
            <tr>
                <td><input class="table_input" id="product" type="text" /></td>
                <td><input class="table_input" id="price" type="text" /></td>
                <td><input class="table_input" id="description" type="text" /></td>
                <td><input class="table_input" id="amount" type="text" /></td>
            </tr>
        </tbody>    
    </table>  
    <button id='btAdd'>Dodaj produkt</button>
<%}%>


<script>
    const role = "<%- role %>";

    
    function compareName(name, toSearch) {
        lowerName = name.toLowerCase();
        lowerToSearch = toSearch.toLowerCase()
        if(lowerName == lowerToSearch) return true;
        if(lowerName.includes(lowerToSearch)) return true;
        return false;
    };
    
    async function constructTableContext(productToSearch) {
        var products = document.getElementById('list_of_products');

        //obiekt products.innerHTML musi dostać na raz całą skonstruowaną tabelę, inaczej przeglądarka może coś w niej namieszać
        //konstruujemy tabelkę w tableContext i potem przypisujemy ją do products.innerHTML
        tableContext = 
            `<thead>
                <tr>
                    <th>Nazwa produktu</th>
                    <th>Cena</th>
                    <th>Opis</th>
                    <th>Dostępna ilość</th>`
        //warunkowe wyświetlanie przycisków w zależności od roli
        if (role == 'użytkownik') {
            tableContext += `
                    <th>Dodaj do koszyka</th>`
        } else if (role == 'admin') {
            tableContext += `
                    <th>Działania administratora</th>`
        }
        tableContext += `
                </tr>
            </thead>
        <tbody>`;

        
        var response = await fetch( '/api/product', { method: 'get'} );
        var jsonResponse = await response.json();
        var amountOfProducts = 0;
        var productsInTable = 0;
        for ( var product of jsonResponse ) {
            amountOfProducts++;
            if(productToSearch == undefined || compareName(product.product, productToSearch)){
                tableContext +=
                    `<tr class='productItem'>
                        <td>${product.product}</td>
                        <td>${product.price}</td>
                        <td>${product.description}</td>
                        <td>${product.amount}</td>`
                //warunkowe wyświetlanie przycisków w zależności od roli
                if (role == 'użytkownik') {
                    tableContext += `
                        <td><button class='addToBagButton' type='button' data-id=${product.id}>Dodaj do koszyka</button></td>`
                } else if (role == 'admin') {
                    tableContext += `
                        <td> 
                            <button class='deleteButton' type='button' data-id=${product.id}>Usuń</button>
                            <button class='editButton' type='button' data-id=${product.id}>Edytuj</button>
                        </td>`
                }
                tableContext += `
                    </tr>`;
            }
            else productsInTable++;
        }
        tableContext += `
            </tbody>`;

        if (amountOfProducts == 0 || productsInTable == amountOfProducts) { //nie działa bo tableContext nigdy nie jest puste - zawsze ma nagłówki tabeli 
            tableContext = 'Brak produktów do wyświetlenia.';
        }
        products.innerHTML = tableContext;
        
        document.querySelectorAll('.deleteButton').forEach( function( button ) {
            button.addEventListener('click', deleteProduct);
        })
        document.querySelectorAll('.editButton').forEach( function( button ) {
            button.addEventListener('click', editProduct);
        })
        document.querySelectorAll('.addToBagButton').forEach( function( button ) {
            button.addEventListener('click', addProductToBag);
        })
    }

    // pobieranie listy produktów
    async function refreshProducts() {
        document.getElementById("productToSearch").value = "";
        await constructTableContext();
    }


    // dodawanie nowego produktu
    async function addProduct() {
        var product = document.getElementById('product').value;
        var price = document.getElementById('price').value;
        var description = document.getElementById('description').value;
        var amount = document.getElementById('amount').value;

        
        document.getElementById("product").value = "";
        document.getElementById("price").value = "";
        document.getElementById("description").value = "";
        document.getElementById("amount").value = "";

        const price_format = /^\d+(\.\d{1,2})?$/;
        const amount_format = /^\d+$/;

        if ( !price_format.test(price) ) {
            alert('Nieodpowiedni format ceny. Prawidłowy format ceny: liczba.dwie_liczby_po_przecinku_opcjonalne')
        } else if (!amount_format.test(amount) ){
            alert('Nieodpowiedni format ilości. Prawidłowy format ilości: liczba całkowita dodatnia')
        } else if ( product && price && description && amount) {
            var response = await fetch(
                '/api/product',
                {
                    method: 'post',
                    headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify( { product, price, description, amount} )
                } );
            
            var jsonResponse = await response.json();
            await refreshProducts();
        } else alert('Wypełnij wszystkie pola nowego produktu');
    }

    // szukanie istniejącego produktu
    async function searchProduct() {
        var productToSearch = document.getElementById('productToSearch').value;
        
        if ( productToSearch ) {
            await constructTableContext(productToSearch);
        } else alert('Nie podano nazwy wyszukiwanego produktu.');
    }

    // edytowanie istniejącego produktu
    async function editProduct(e) {
        var id = e.target.getAttribute('data-id');
        var products = document.getElementById('list_of_products');
        products.innerHTML =          
            `<thead>
                <tr>
                    <th>Id</th>
                    <th>Nazwa produktu</th>
                    <th>Cena</th>
                    <th>Opis</th>
                    <th>Dostępna ilość</th>
                </tr>
            </thead>
            <tbody>`;
        var response = await fetch( '/api/product', { method: 'get'} );
        var jsonResponse = await response.json();
        //ZMIANY DO SPRAWDZENIA --------------------------------------------------------------------------------------------------zostawiamy ID przy edytowaniu? - administrator może dobrze żeby widział
        for ( var product of jsonResponse ) {
            if(product.id == id){
                products.innerHTML +=
                `<tr class='productItem'>
                    <td>${product.id}.</td>
                    <td><input class="table_input" id="edit_product" type="text" value=${product.product} /></td>
                    <td><input class="table_input" id="edit_price" type="text" value=${product.price} /></td>
                    <td><input class="table_input" id="edit_description" type="text" value=${product.description} /></td>
                    <td><input class="table_input" id="edit_amount" type="text" value=${product.amount} /></td> 
                    <button class='saveButton' type='button'  data-id=${product.id}>Zapisz</button>
                    <button class="cancelButton" type="button" data-id="${product.id}">Anuluj</button>  
                </tr>`;
            } else {
            products.innerHTML +=
                `<tr class='productItem'>
                    <td>${product.id}.</td>
                    <td>${product.product}</td>
                    <td>${product.price}</td>
                    <td>${product.description}</td>
                    <td>${product.amount}</td> 
                </tr>`;
            } //----------------------------------------------------------------------------------------------------------------------------
        }

        document.querySelectorAll('.saveButton').forEach( function( button ) {
            button.addEventListener('click', updateProduct);
        })

        document.querySelectorAll('.cancelButton').forEach(function (button) {
        button.addEventListener('click', cancelEdit);
        });
    }

    async function updateProduct(e) {
        e.preventDefault();
        var id = e.target.getAttribute('data-id');
        var product = document.getElementById('edit_product').value;
        var price = document.getElementById('edit_price').value;
        var description = document.getElementById('edit_description').value;
        var amount = document.getElementById('edit_amount').value;
        
        const price_format = /^\d+(\.\d{1,2})?$/;
        const amount_format = /^\d+$/;

        if ( !price_format.test(price) ) {
            alert('Nieodpowiedni format ceny. Prawidłowy format ceny: liczba.dwie_liczby_po_przecinku_opcjonalne')
        } else if (!amount_format.test(amount) ){
            alert('Nieodpowiedni format ilości. Prawidłowy format ilości: liczba całkowita dodatnia')
        } else if ( product && price && description && amount ) {
            var response = await fetch(`/api/product/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ product, price, description, amount }),
            });
        } else alert('Wypełnij wszystkie pola nowego produktu');
        
        var jsonResponse = await response.json();
        await refreshProducts();
    }

    function cancelEdit(e) {
        e.preventDefault();
        refreshProducts(); 
    }

    // usuwanie istniejącego produktu
    async function deleteProduct(e) {
        e.preventDefault(); // gdyby był formularz to zabezpiecza przed odesłaniem - dobrze wiedzieć
        var id = e.target.getAttribute('data-id');
        await fetch(`/api/product/${id}`, { method: 'delete'});
        await refreshProducts();
    }

    //dodawanie produktu do koszyka
    async function addProductToBag(e) {
        e.preventDefault(); 
        var id = e.target.getAttribute('data-id');
        await fetch(`/api/addToBag/${id}`, { method: 'post'});
        //await refreshProducts(); czy trzeba? NIE
    }

    //aktualizowanie/ ładowanie strony
    window.addEventListener('load', function() {
        refreshProducts();

        var btAdd = document.getElementById('btAdd');
        if (btAdd)
            btAdd.addEventListener('click', addProduct);

        var btSearch = document.getElementById('btSearch');
        btSearch.addEventListener('click', searchProduct);

        var btClear = document.getElementById('btClear');
        btClear.addEventListener('click', refreshProducts);
    });
</script>
